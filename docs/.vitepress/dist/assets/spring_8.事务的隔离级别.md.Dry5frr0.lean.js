import{_ as e,c as a,a2 as r,o as l}from"./chunks/framework.DPuwY6B9.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"spring/8.事务的隔离级别.md","filePath":"spring/8.事务的隔离级别.md","lastUpdated":1729815932000}'),n={name:"spring/8.事务的隔离级别.md"};function d(i,t,o,s,c,h){return l(),a("div",null,t[0]||(t[0]=[r('<h3 id="事务会出现的问题" tabindex="-1">事务会出现的问题 <a class="header-anchor" href="#事务会出现的问题" aria-label="Permalink to &quot;事务会出现的问题&quot;">​</a></h3><h4 id="脏读-一个事务读到了其他事务未提交的数据" tabindex="-1">脏读：一个事务读到了其他事务未提交的数据 <a class="header-anchor" href="#脏读-一个事务读到了其他事务未提交的数据" aria-label="Permalink to &quot;脏读：一个事务读到了其他事务未提交的数据&quot;">​</a></h4><p><img src="http://tc.masterjoy.top/typory/v2-77225da0805e43183c076c24f270e75b_720w.jpg" alt="img"></p><h4 id="不可重复读-在同一个事务内-在不同的阶段读取同一条的数据是不一致的" tabindex="-1">不可重复读：在同一个事务内，在不同的阶段读取同一条的数据是不一致的 <a class="header-anchor" href="#不可重复读-在同一个事务内-在不同的阶段读取同一条的数据是不一致的" aria-label="Permalink to &quot;不可重复读：在同一个事务内，在不同的阶段读取同一条的数据是不一致的&quot;">​</a></h4><p><img src="http://tc.masterjoy.top/typory/v2-90289243339a900aaf3f87d9c9930258_720w.jpg" alt="img"></p><h4 id="幻读-保证了事务内读取的数据不会被各个阶段是一直的-但是其他事务插入一条数据-则再次读取数据的时候会出现其他事务插入的数据-这样就出现了幻读" tabindex="-1">幻读：保证了事务内读取的数据不会被各个阶段是一直的，但是其他事务插入一条数据，则再次读取数据的时候会出现其他事务插入的数据，这样就出现了幻读 <a class="header-anchor" href="#幻读-保证了事务内读取的数据不会被各个阶段是一直的-但是其他事务插入一条数据-则再次读取数据的时候会出现其他事务插入的数据-这样就出现了幻读" aria-label="Permalink to &quot;幻读：保证了事务内读取的数据不会被各个阶段是一直的，但是其他事务插入一条数据，则再次读取数据的时候会出现其他事务插入的数据，这样就出现了幻读&quot;">​</a></h4><p><img src="http://tc.masterjoy.top/typory/v2-85fd2da20ae7cf219bf55d8b81f8bd94_720w.jpg" alt="img"></p><p><img src="http://tc.masterjoy.top/typory/v2-457f695ba253674e7a998297660c1a01_720w.jpg" alt="img"></p><h3 id="事务的隔离级别" tabindex="-1">事务的隔离级别 <a class="header-anchor" href="#事务的隔离级别" aria-label="Permalink to &quot;事务的隔离级别&quot;">​</a></h3><h5 id="未提交读" tabindex="-1">未提交读 <a class="header-anchor" href="#未提交读" aria-label="Permalink to &quot;未提交读&quot;">​</a></h5><p>没有做任何隔离，多条事务并行的话会出现脏读，不可重复读，和幻读现象</p><h5 id="已提交读" tabindex="-1">已提交读 <a class="header-anchor" href="#已提交读" aria-label="Permalink to &quot;已提交读&quot;">​</a></h5><p>不会出现脏读，但是会出现不可重复读</p><h5 id="可重复读" tabindex="-1">可重复读 <a class="header-anchor" href="#可重复读" aria-label="Permalink to &quot;可重复读&quot;">​</a></h5><p>不会出现脏读，不可重复读，但是会出现幻读，对其他事务插入的数据的无法区别</p><h5 id="串行化" tabindex="-1">串行化 <a class="header-anchor" href="#串行化" aria-label="Permalink to &quot;串行化&quot;">​</a></h5><p>不会出现脏读，不可重复读，幻读现象，但是性能特别低，需要权衡利弊</p><h3 id="事务的隔离级别解决了哪些问题" tabindex="-1">事务的隔离级别解决了哪些问题 <a class="header-anchor" href="#事务的隔离级别解决了哪些问题" aria-label="Permalink to &quot;事务的隔离级别解决了哪些问题&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">隔离级别</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td style="text-align:center;">未提交读</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td></tr><tr><td style="text-align:center;">已提交读</td><td style="text-align:center;">否</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td></tr><tr><td style="text-align:center;">可重复读</td><td style="text-align:center;">否</td><td style="text-align:center;">否</td><td style="text-align:center;">是</td></tr><tr><td style="text-align:center;">串行化</td><td style="text-align:center;">否</td><td style="text-align:center;">否</td><td style="text-align:center;">否</td></tr></tbody></table>',19)]))}const x=e(n,[["render",d]]);export{g as __pageData,x as default};
