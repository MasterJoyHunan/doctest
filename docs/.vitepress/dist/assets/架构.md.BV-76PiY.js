import{_ as e,c as t,a2 as r,o}from"./chunks/framework.DPuwY6B9.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"架构.md","filePath":"架构.md","lastUpdated":1729815932000}'),l={name:"架构.md"};function i(n,a,s,d,h,c){return o(),t("div",null,a[0]||(a[0]=[r('<h3 id="架构图" tabindex="-1">架构图 <a class="header-anchor" href="#架构图" aria-label="Permalink to &quot;架构图&quot;">​</a></h3><ul><li><strong>业务架构</strong>：需求初期业务的结果和过程描述一般比较模糊，可能来自于某个老板、运营或用户的反馈。<em>客户说海尔洗衣机洗土豆会堵，海尔立马设计专门的土豆洗衣机</em> 业务方向往往是定方向和结果的叫<code>战略</code>，主要包括业务规划、业务模块和流程以及问题域的列表等</li><li><strong>应用架构</strong>：服务复用、跨组协同，简单、灵活、整合是应用架构必须考虑的点，就像你要上线一个聊天功能，那么聊天内容的输入法、文字识别、舆情监控以及视频服务、支付服务等，它们都是在应用架构分层下沉淀到平台的产物，在供各个方使用。</li><li><strong>产品架构</strong>：业务提需求，产品定方案，相对于业务的粗放流程，产品架构会更加细腻以及考虑各个模块的分层和边界。</li><li><strong>数据架构</strong>：数据的获取、数据的存放和数据的使用是数据架构要解决的三个问题，数据库存放、大数据汇总、数据分析等。</li><li><strong>技术架构</strong>：是离程序员最近的架构设计，它不仅是系统搭建的架构图设计，还包括了结构、功能、流程、逻辑等内容。它的具体描述就是整个系统如何落地的具体实现方案。</li></ul><h3 id="流程图" tabindex="-1">流程图 <a class="header-anchor" href="#流程图" aria-label="Permalink to &quot;流程图&quot;">​</a></h3><h3 id="结构图" tabindex="-1">结构图 <a class="header-anchor" href="#结构图" aria-label="Permalink to &quot;结构图&quot;">​</a></h3><h3 id="功能图" tabindex="-1">功能图 <a class="header-anchor" href="#功能图" aria-label="Permalink to &quot;功能图&quot;">​</a></h3><h3 id="逻辑图" tabindex="-1">逻辑图 <a class="header-anchor" href="#逻辑图" aria-label="Permalink to &quot;逻辑图&quot;">​</a></h3>',6)]))}const f=e(l,[["render",i]]);export{m as __pageData,f as default};
