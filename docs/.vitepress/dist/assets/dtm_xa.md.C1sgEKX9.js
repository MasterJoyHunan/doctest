import{_ as a,c as i,a2 as l,o as n}from"./chunks/framework.DPuwY6B9.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dtm/xa.md","filePath":"dtm/xa.md","lastUpdated":1729761429000}'),t={name:"dtm/xa.md"};function e(p,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h4 id="xa事务" tabindex="-1">XA事务 <a class="header-anchor" href="#xa事务" aria-label="Permalink to &quot;XA事务&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4fPqCNTYeSG&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`user_account\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`balance\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`update_time\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-06-09 11:50:42.438&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4fPqCNTYeSG&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- (一阶段)执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XA prepare </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4fPqCNTYeSG&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- (二阶段)当所有的参与者完成了prepare，就提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4fPqCNTYeSG&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- (二阶段)当有任一的参与者 faild，就回滚</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rollback</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4fPqCNTYeSG&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 可以查看本地所有 prepare 状态的 xa 事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xa recover</span></span></code></pre></div><ol><li>获取 IP 和 雪花算法获取全局唯一 ID</li><li><em>一阶段</em><ol><li>[分布事务管理服务] 接受到事务请求时,首先会在数据库 trans_global 创建一个提交状态为 prepared 的持久化数据</li><li>主程序调用多个子事务 (接口/微服务) <ol><li>每个子事务都会在本地建立一个新的数据库连接,且顺序执行 <ol><li>\`xa start &#39;gid&#39;\`\`</li><li>\`\`update/delete 业务逻辑\`</li><li>[分布事务管理服务] 将会在 trans_branch 插入一条 branch_type = commit 和一条 rollback , state = prepare 的数据,持久化记录子事务当前状态</li><li><code>xa end &#39;gid&#39;</code></li><li><code>xa prepare &#39;gid&#39;</code></li></ol></li><li>关闭数据库连接</li></ol></li></ol></li><li><em>二阶段</em><ol><li>如果所有子事务没有返回异常 1. 将 trans_global 状态修改为 submitted 2. 将 trans_branch 的 branch_type = commit 状态修改为 succeed 3. 请求 trans_branch 保存的 url ,子事务提交自己事务 <em><code>xa submmit &#39;gid&#39;</code></em> 4. 将 trans_global 状态修改为 succeed</li><li>如果有任一子事务发生异常 <ol><li>将 trans_global 状态修改为 aborting</li><li>将 trans_branch 的 branch_type = rollback 状态修改为 succeed</li><li>请求 trans_branch 保存的 url ,子事务提交自己事务 <em><code>xa rollback &#39;gid&#39;</code></em></li><li>将 trans_global 状态修改为 failed</li></ol></li></ol></li></ol><h4 id="成功时序图" tabindex="-1">成功时序图 <a class="header-anchor" href="#成功时序图" aria-label="Permalink to &quot;成功时序图&quot;">​</a></h4><img src="http://tc.masterjoy.top/typory/xa_normal.5a0ce600.jpg" width="600" style="float:left;"><h4 id="失败时序图" tabindex="-1">失败时序图 <a class="header-anchor" href="#失败时序图" aria-label="Permalink to &quot;失败时序图&quot;">​</a></h4><img src="http://tc.masterjoy.top/typory/xa_rollback.dccc3558.jpg" width="600" style="float:left;">`,7)]))}const g=a(t,[["render",e]]);export{o as __pageData,g as default};
