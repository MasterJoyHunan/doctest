import{_ as i,c as a,a2 as e,o as t}from"./chunks/framework.DPuwY6B9.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"spring-cloud/gateway.md","filePath":"spring-cloud/gateway.md","lastUpdated":1729761429000}'),n={name:"spring-cloud/gateway.md"};function l(p,s,h,r,k,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h3 id="网关简介" tabindex="-1">网关简介 <a class="header-anchor" href="#网关简介" aria-label="Permalink to &quot;网关简介&quot;">​</a></h3><p><a href="https://s0cloud0spring0io.icopy.site/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#the-between-route-predicate-factory" target="_blank" rel="noreferrer">官方文档</a></p><h3 id="路由匹配-route-predicates" tabindex="-1">路由匹配 <code>route predicates</code> <a class="header-anchor" href="#路由匹配-route-predicates" aria-label="Permalink to &quot;路由匹配 \`route predicates\`&quot;">​</a></h3><p>某个请求必须匹配不同的规则，才能进行对应的转发</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">after_route</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://example.org</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        predicates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 路由匹配规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span></code></pre></div><p>内置路由匹配规则 （精选）</p><ul><li>After -- 某个时间节点之后该规则才能生效</li><li>Before -- 某个时间节点之前该规则才能生效</li><li>Between -- 某两个时间节点之间该规则才能生效</li><li>Cookie -- 必须包含了某个 cookie</li><li>......</li></ul><h3 id="过滤器-route-fliter" tabindex="-1">过滤器 <code>route fliter</code> <a class="header-anchor" href="#过滤器-route-fliter" aria-label="Permalink to &quot;过滤器 \`route fliter\`&quot;">​</a></h3><p>路由过滤器允许以某种方式修改传入的HTTP请求或传出的HTTP响应，一般不常用，我们经常使用代码来进行过滤的操作</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">add_request_parameter_route</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://example.org</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 过滤器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AddRequestParameter=red, blue</span></span></code></pre></div><p>内置的过滤器（精选）：</p><ul><li>AddRequestHeader -- 将某个请求头加入请求</li><li>AddRequestParameter -- 将某个请求参数加入请求</li><li>AddResponseHeader -- 将某个请求的响应头加入到响应</li><li>DedupeResponseHeader -- 将某个请求的响应头删除</li><li>SetPath -- 将某个请求的 url 重新设置</li><li>.......</li></ul><h3 id="实际案例-配合-nacos-config-实现动态网关" tabindex="-1">实际案例：配合 nacos config 实现动态网关 <a class="header-anchor" href="#实际案例-配合-nacos-config-实现动态网关" aria-label="Permalink to &quot;实际案例：配合 nacos config 实现动态网关&quot;">​</a></h3><h3 id="实际案例-实现灰度发布" tabindex="-1">实际案例：实现灰度发布 <a class="header-anchor" href="#实际案例-实现灰度发布" aria-label="Permalink to &quot;实际案例：实现灰度发布&quot;">​</a></h3><p>ui 界面自带实现了基于 IP 粒度的灰度发布，如需其他灰度发布，需自己定义</p>`,15)]))}const c=i(n,[["render",l]]);export{E as __pageData,c as default};
