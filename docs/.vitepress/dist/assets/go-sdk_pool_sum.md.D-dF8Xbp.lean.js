import{_ as o,c as t,a2 as d,o as l}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"go-sdk/pool/sum.md","filePath":"go-sdk/pool/sum.md","lastUpdated":1729761429000}'),a={name:"go-sdk/pool/sum.md"};function c(i,e,r,s,n,p){return l(),t("div",null,e[0]||(e[0]=[d('<h3 id="疑问" tabindex="-1">疑问 <a class="header-anchor" href="#疑问" aria-label="Permalink to &quot;疑问&quot;">​</a></h3><p>通过学习 <code>pool</code> 源码，我们可能解决了部分问题，但是随之而来是更多的问题。</p><ul><li>什么是 <code>free-lock</code>？</li><li>什么时候使用 <code>atomic</code> 什么时候又不使用呢？</li><li><code>*(*interface{})(unsafe.Pointer(slot))</code> 到底做了什么？</li><li><code>race</code> 包做了什么？</li><li><code>put</code> 操作为什么要判断 <code> typ = nil</code> 呢？</li><li>什么情况下 <code>d</code> 暂时为空呢？</li></ul><h3 id="收获" tabindex="-1">收获 <a class="header-anchor" href="#收获" aria-label="Permalink to &quot;收获&quot;">​</a></h3><p>通过学习 <code>pool</code> 源码，我们认识，且学会了一下的知识点，收获颇丰</p><ul><li>golang 的 <code>MPG</code>模型</li><li><code>unsafe</code> 包，用来操作内存</li><li><code>atomic</code> 包，用来原子操作</li><li>学会了一些 GC 的知识</li><li>对 <code>pool</code> 的结构有了清晰的认识，如下图 <img src="http://tc.masterjoy.top/20200611/57ed1785e77624dede92571b77fb455e.png" alt="http://tc.masterjoy.top/20200611/57ed1785e77624dede92571b77fb455e.png"></li></ul>',6)]))}const f=o(a,[["render",c]]);export{u as __pageData,f as default};
