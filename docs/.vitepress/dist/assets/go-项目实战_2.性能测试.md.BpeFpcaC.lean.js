import{_ as i,c as a,a2 as n,o as h}from"./chunks/framework.DPuwY6B9.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"go-项目实战/2.性能测试.md","filePath":"go-项目实战/2.性能测试.md","lastUpdated":1729815932000}'),t={name:"go-项目实战/2.性能测试.md"};function k(l,s,p,e,d,r){return h(),a("div",null,s[0]||(s[0]=[n(`<h3 id="规范" tabindex="-1">规范 <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;规范&quot;">​</a></h3><p>性能测试的用例函数必须以Benchmark开头，例如BenchmarkXxx或Benchmark_Xxx（ Xxx 部分为任意字母数字组合，首字母大写）。</p><p>函数参数必须是*testing.B，函数内以b.N作为循环次数，其中N会在运行时动态调整，直到性能测试函数可以持续足够长的时间，以便能够可靠地计时。下面的代码是一个简单的性能测试函数</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BenchmarkRandInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.N; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        RandInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>go test命令默认不会执行性能测试函数，需要通过指定参数-bench 来运行性能测试函数。-bench后可以跟正则表达式，选择需要执行的性能测试函数，例如go test -bench=&quot;.<em>&quot;表示执行所有的压力测试函数。执行go test -bench=&quot;.</em>&quot;后输出如下</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -bench=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.*&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">goos:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">goarch:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> amd64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkg:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/marmotedu/gopractise-demo/31/test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 该3列的表示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BenchmarkRandInt-4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      97384827</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                12.4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns/op</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PASS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ok</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      github.com/marmotedu/gopractise-demo/31/test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    1.223s</span></span></code></pre></div><ul><li><code>BenchmarkRandInt-4</code> -- BenchmarkRandInt表示所测试的测试函数名，4 表示有 4 个 CPU 线程参与了此次测试，默认是GOMAXPROCS的值。</li><li><code>97384827</code> -- 说明函数中的循环执行了97384827次。</li><li><code>12.4 ns/op</code> -- 说明每次循环的执行平均耗时是 12.4 纳秒，该值越小，说明代码性能越高。</li></ul><p>如果我们的性能测试函数在执行循环前，需要做一些耗时的准备工作，我们就需要重置性能测试时间计数</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BenchmarkBigLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    big </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewBig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化一些操作，如果该操作需要很长时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResetTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在这里重设计时器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.N; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        big.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>也可以先停止性能测试的时间计数，然后再开始时间计数</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BenchmarkBigLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StopTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用该函数停止压力测试的时间计数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  big </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewBig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StartTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新开始时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.N; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    big.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="性能测试支持的参数" tabindex="-1">性能测试支持的参数 <a class="header-anchor" href="#性能测试支持的参数" aria-label="Permalink to &quot;性能测试支持的参数&quot;">​</a></h3><h4 id="benchmem-输出内存分配统计" tabindex="-1">benchmem，输出内存分配统计 <a class="header-anchor" href="#benchmem-输出内存分配统计" aria-label="Permalink to &quot;benchmem，输出内存分配统计&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -bench=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.*&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -benchmem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">goos:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">goarch:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> amd64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkg:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/marmotedu/gopractise-demo/31/test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BenchmarkRandInt-4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      96776823</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                12.8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns/op</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> B/op</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allocs/op</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PASS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ok</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      github.com/marmotedu/gopractise-demo/31/test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    1.255s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0 B/op         每次执行分配了多少内存（字节），该值越小，说明代码内存占用越小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0 allocs/op    表示每次执行分配了多少次内存，该值越小，说明分配内存次数越少，意味着代码性能越高</span></span></code></pre></div><h4 id="benchtime-指定测试时间和循环执行次数-格式需要为-nx-例如-100x" tabindex="-1">benchtime，指定测试时间和循环执行次数（格式需要为 Nx，例如 100x） <a class="header-anchor" href="#benchtime-指定测试时间和循环执行次数-格式需要为-nx-例如-100x" aria-label="Permalink to &quot;benchtime，指定测试时间和循环执行次数（格式需要为 Nx，例如 100x）&quot;">​</a></h4><h4 id="cpu-指定-gomaxprocs" tabindex="-1">cpu，指定 GOMAXPROCS <a class="header-anchor" href="#cpu-指定-gomaxprocs" aria-label="Permalink to &quot;cpu，指定 GOMAXPROCS&quot;">​</a></h4><h4 id="timeout-指定测试函数执行的超时时间" tabindex="-1">timeout，指定测试函数执行的超时时间 <a class="header-anchor" href="#timeout-指定测试函数执行的超时时间" aria-label="Permalink to &quot;timeout，指定测试函数执行的超时时间&quot;">​</a></h4>`,17)]))}const F=i(t,[["render",k]]);export{E as __pageData,F as default};
