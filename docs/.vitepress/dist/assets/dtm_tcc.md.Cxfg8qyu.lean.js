import{_ as t,c as l,a2 as e,o as r}from"./chunks/framework.DPuwY6B9.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dtm/tcc.md","filePath":"dtm/tcc.md","lastUpdated":1729761429000}'),i={name:"dtm/tcc.md"};function c(o,a,n,s,d,h){return r(),l("div",null,a[0]||(a[0]=[e('<h4 id="tcc事务" tabindex="-1">TCC事务 <a class="header-anchor" href="#tcc事务" aria-label="Permalink to &quot;TCC事务&quot;">​</a></h4><ol><li>获取 IP 和 雪花算法获取全局唯一 ID</li><li>[分布事务管理服务] 接受到事务请求时,首先会在数据库 trans_global 创建一个提交状态为 prepare 的持久化数据</li><li>循环注册子事务分支 <ol><li>[客户端]注册子事务分支,分别提供 try, confirm, cancel 接口</li><li>[分布事务管理服务] 在 trans_branch 将子事务持久化为 3 条 branch_type = try / confirm / cancel 的数据</li><li>[客户端]执行子事务分支 try 分支</li><li>如果无异常进行下一轮循环</li><li>如果有异常,则 abort <ol><li>将 trans_global 状态修改为 aborting</li><li>调用 trans_branch 的 branch_type = cancel 保存的 url</li><li>如果调用成功 branch_type = cancel 保存的 url , 则将branch_type = cancel 状态修改为 succeed</li><li>将 trans_global 状态修改为 failed</li></ol></li></ol></li><li>所有子事务都进行 try 了之后, [分布事务管理服务] 将 trans_global 状态修改为 submitted</li><li>调用所有子事务的 confirm 分支</li><li>如果所有子事务的 confirm 分支都返回成功,则将 trans_global 状态修改为 succeed</li></ol><h4 id="成功时序图" tabindex="-1">成功时序图 <a class="header-anchor" href="#成功时序图" aria-label="Permalink to &quot;成功时序图&quot;">​</a></h4><img src="https://dtm.pub/assets/tcc_normal.dea14fb3.jpg" width="600" style="float:left;"><h4 id="失败时序图" tabindex="-1">失败时序图 <a class="header-anchor" href="#失败时序图" aria-label="Permalink to &quot;失败时序图&quot;">​</a></h4><img src="https://dtm.pub/assets/tcc_rollback.f28601d7.jpg" width="600" style="float:left;">',6)]))}const p=t(i,[["render",c]]);export{b as __pageData,p as default};
