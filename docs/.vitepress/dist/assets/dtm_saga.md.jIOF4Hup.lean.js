import{_ as l,c as t,a2 as e,o as i}from"./chunks/framework.DPuwY6B9.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dtm/saga.md","filePath":"dtm/saga.md","lastUpdated":1729761429000}'),o={name:"dtm/saga.md"};function s(r,a,n,d,c,h){return i(),t("div",null,a[0]||(a[0]=[e('<h4 id="saga-事务" tabindex="-1">SAGA 事务 <a class="header-anchor" href="#saga-事务" aria-label="Permalink to &quot;SAGA 事务&quot;">​</a></h4><ol><li>获取 IP 和 雪花算法获取全局唯一 ID</li><li>将自己的多个子事务,且每个事务对应的提交接口和回滚接口,提交给 [分布事务管理服务]</li><li>[分布事务管理服务] 接受到事务请求时,首先会在数据库 trans_global 创建一个提交状态为 submitted 的持久化数据</li><li>[分布事务管理服务] 在 trans_branch 将所有的子事务一并持久化,每个子事务分别持久化两条数据 <ol><li>分支类型为 action ,状态设置为 prepared , 保存 [步骤2] 的提交接口</li><li>分支类型为 compensate 状态设置为 prepared , 保存 [步骤2] 的回滚接口</li></ol></li><li>[分布事务管理服务] 循环处理子事务类型为 [action ] 的分支,调用保存的接口,如果成功,则将该子事务状态修改为 succeed ,如果失败,则将该子事务状态修改为 failed</li><li>[分布事务管理服务] 循环完处理子事务类型为 [action ] 的分支之后 <ol><li>如果所有子事务类型为 [action ] 的分支处理的结果都为 succeed , [分布事务管理服务]会将 trans_global 的状态修改为 succeed</li><li>如果有任何一个子事务类型为 [action ] 的分支失败,则将 trans_global 的状态修改为 aborting <ol><li>循环完处理子事务类型为 [compensate] 的分支,重复 [步骤5]</li><li>将 trans_global 的状态修改为 failed</li></ol></li></ol></li></ol><h4 id="正常时序图" tabindex="-1">正常时序图 <a class="header-anchor" href="#正常时序图" aria-label="Permalink to &quot;正常时序图&quot;">​</a></h4><img src="https://dtm.pub/assets/saga_normal.a2849672.jpg" width="600" style="float:left;"><h4 id="异常时序图" tabindex="-1">异常时序图 <a class="header-anchor" href="#异常时序图" aria-label="Permalink to &quot;异常时序图&quot;">​</a></h4><img src="https://dtm.pub/assets/saga_rollback.8da8593f.jpg" width="600" style="float:left;"><h4 id="saga-事务超时" tabindex="-1">SAGA 事务超时 <a class="header-anchor" href="#saga-事务超时" aria-label="Permalink to &quot;SAGA 事务超时&quot;">​</a></h4><ol><li></li></ol>',8)]))}const g=l(o,[["render",s]]);export{p as __pageData,g as default};
