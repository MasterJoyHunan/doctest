import{_ as a,c as t,a2 as r,o as s}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"flowable/4.专业名词.md","filePath":"flowable/4.专业名词.md","lastUpdated":1729815932000}'),n={name:"flowable/4.专业名词.md"};function o(i,e,l,d,c,h){return s(),t("div",null,e[0]||(e[0]=[r('<h3 id="任务指派给特定的用户" tabindex="-1">任务指派给特定的用户 <a class="header-anchor" href="#任务指派给特定的用户" aria-label="Permalink to &quot;任务指派给特定的用户&quot;">​</a></h3><h4 id="用户指派-assign" tabindex="-1">用户指派 assign <a class="header-anchor" href="#用户指派-assign" aria-label="Permalink to &quot;用户指派 assign&quot;">​</a></h4><p><strong>只能指定一个</strong>用户作为任务的<strong>办理人（assignee）</strong>,拥有办理人的任务，在其他人的任务列表中不可见，而只能在该办理人的<strong>个人任务列表</strong>中看到。</p><h4 id="候选用户-candidateusers" tabindex="-1"><strong>候选用户</strong> <strong>candidateUsers</strong> <a class="header-anchor" href="#候选用户-candidateusers" aria-label="Permalink to &quot;**候选用户** **candidateUsers**&quot;">​</a></h4><p>可以指定多个,指定的成员对该任务可见</p><h4 id="候选组-candidategroups" tabindex="-1"><strong>候选组</strong> <strong>candidateGroups</strong> <a class="header-anchor" href="#候选组-candidategroups" aria-label="Permalink to &quot;**候选组** **candidateGroups**&quot;">​</a></h4><p>可以指定多个候选组,该组下的所有成员对该任务可见</p><h4 id="其他成员" tabindex="-1">其他成员 <a class="header-anchor" href="#其他成员" aria-label="Permalink to &quot;其他成员&quot;">​</a></h4><h4 id="任务拥有者-owner" tabindex="-1">任务拥有者 OWNER <a class="header-anchor" href="#任务拥有者-owner" aria-label="Permalink to &quot;任务拥有者 OWNER&quot;">​</a></h4><h4 id="任务启动者-starter" tabindex="-1">任务启动者 STARTER <a class="header-anchor" href="#任务启动者-starter" aria-label="Permalink to &quot;任务启动者 STARTER&quot;">​</a></h4><h4 id="任务参与者-participant" tabindex="-1">任务参与者 PARTICIPANT <a class="header-anchor" href="#任务参与者-participant" aria-label="Permalink to &quot;任务参与者 PARTICIPANT&quot;">​</a></h4><h3 id="执行监听器-execution-listener" tabindex="-1">执行监听器 (execution listener) <a class="header-anchor" href="#执行监听器-execution-listener" aria-label="Permalink to &quot;执行监听器 (execution listener)&quot;">​</a></h3><p>执行监听器（execution listener）可以在流程执行中发生特定的事件时，执行外部Java代码或计算表达式。可以被捕获的事件有：</p><ul><li>流程实例的启动和结束。</li><li>流程执行转移。</li><li>活动的启动和结束。</li><li>网关的启动和结束。</li><li>中间事件的启动和结束。</li><li>启动事件的结束，和结束事件的启动。</li></ul><h3 id="任务监听器" tabindex="-1">任务监听器 <a class="header-anchor" href="#任务监听器" aria-label="Permalink to &quot;任务监听器&quot;">​</a></h3><p>*任务监听器（task listener）*用于在特定的任务相关事件发生时，执行自定义的Java逻辑或表达式。任务监听器只能在流程定义中作为用户任务的子元素</p><p><em>任务监听器</em>包含下列属性</p><ul><li><strong>event（事件）</strong><ul><li><strong>create（创建）</strong>：当任务已经创建，并且<strong>所有任务参数都已经设置</strong>时触发。</li><li><strong>assignment（指派）</strong>：当任务已经指派给某人时触发。请注意：当流程执行到达用户任务时，在触发<em>create</em>事件<strong>之前</strong>，会首先触发<em>assignment</em>事件。这顺序看起来不太自然，但是有实际原因的：当收到<em>create</em>事件时，我们通常希望能看到任务的所有参数，包括办理人。</li><li><strong>complete（完成）</strong>：当任务已经完成，从运行时数据中删除前触发。</li><li><strong>delete（删除）</strong>：在任务即将被删除前触发。请注意任务由completeTask正常完成时也会触发。</li></ul></li><li><strong>class</strong> 需要调用的委托类。这个类必须实现<code>org.flowable.engine.delegate.TaskListener</code>接口。</li><li><strong>expression</strong>（不能与<em>class</em>属性一起使用）：指定在事件发生时要执行的表达式。可以为被调用的对象传递<code>DelegateTask</code>对象与事件名（使用<code>task.eventName</code>）作为参数。</li><li><strong>delegateExpression</strong> 指定一个能够解析为<code>TaskListener</code>接口实现类的对象的表达式</li><li>脚本</li></ul>',18)]))}const p=a(n,[["render",o]]);export{u as __pageData,p as default};
