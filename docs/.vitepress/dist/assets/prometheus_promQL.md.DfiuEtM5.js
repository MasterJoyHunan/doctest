import{_ as o,c as e,a2 as r,o as n}from"./chunks/framework.DPuwY6B9.js";const l=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"prometheus/promQL.md","filePath":"prometheus/promQL.md","lastUpdated":1729815932000}'),s={name:"prometheus/promQL.md"};function d(a,t,u,i,q,g){return n(),e("div",null,t[0]||(t[0]=[r('<h3 id="_11个聚合运算" tabindex="-1">11个聚合运算 <a class="header-anchor" href="#_11个聚合运算" aria-label="Permalink to &quot;11个聚合运算&quot;">​</a></h3><ul><li><code>sum ([metrics])</code> 求指标的和</li><li><code>max ([metrics])</code> 求指标的最大值</li><li><code>avg ([metrics])</code> 求指标的平均值</li><li><code>min ([metrics])</code> 求指标的最小值</li><li><code>count([metrics])</code> 求指标的数量</li><li><code>rate ([metrics] [5m])</code> 指标在某个时间段内每秒的数据 一般配合 <code>[?m]</code> 来使用，对 counter 类型起作用</li><li>increase 类似 rate</li><li>irate 类似 rate</li><li>histogram_quantile(0.9, rate([xxx_xx])) 求某个百分位以内的 数据</li><li>stdvar 标准差 -- 看不懂</li><li>strdev 标准差 -- 看不懂</li><li>topk 取最大的 K 条数据</li><li>bottomk 取最小的 K 条数据</li><li>quantile 返回指定分位数的值</li><li>count_values</li></ul><h3 id="_2个子句" tabindex="-1">2个子句 <a class="header-anchor" href="#_2个子句" aria-label="Permalink to &quot;2个子句&quot;">​</a></h3><ul><li><code>without([tag])</code> 去除某个指标的标签.</li><li><code>by([tag])</code> 只保留某个指标的标签</li></ul><h3 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h3><p>例子</p><table tabindex="0"><thead><tr><th>node_network_transmit_bytes_total{<strong>device</strong>=&quot;br-19b2f4f5e7f6&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</th><th>0</th></tr></thead><tbody><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;br-5d9832a8ae2c&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>0</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;br-d27aeb309ca0&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>29584540</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;br-d9f9027f6de8&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>0</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;br-dcd041b1ac24&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>2427661</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;cni0&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>5820162096</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;docker0&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>0</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;eth0&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>4842776896</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;flannel.1&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>0</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;lo&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>47515597119</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;veth03184be1&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>1093102054</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;veth0ac84dd4&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>1027627687</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;veth45c630a0&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>2436377286</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;veth5cb0f9fe&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>1025031012</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;veth713a1ae&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>8461006</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;veth7937b5b&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>5843965</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;vethe2f8333&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>2427661</td></tr><tr><td>node_network_transmit_bytes_total{<strong>device</strong>=&quot;vethf7b06cdc&quot;, <strong>instance</strong>=&quot;masterjoy.top:8100&quot;, <strong>job</strong>=&quot;masterjoy-node&quot;}</td><td>331394654</td></tr></tbody></table><ul><li><code>=</code> 等式匹配器 { <strong>job</strong>=&quot;masterjoy-node&quot;} 这里指 job 标签的值必须等于 &quot;masterjoy-node&quot;， 还有一种用法是 {job=&quot;&quot;}, 这样是指 job 标签必须不存在</li><li><code>!=</code> 否定等式匹配器 { <strong>job</strong>!=&quot;masterjoy-node&quot;} 这里指 job 标签的值必须不等于 &quot;masterjoy-node&quot;</li><li><code>=~</code> 正则表达式匹配器 { <strong>job</strong>=~&quot;m.*&quot;} 正则是完全锚定的，这里指匹配标签前缀为 <code>m</code> 的指标， 如果标签前缀为 <code>am</code> 则不会匹配</li><li><code>!~</code> 与上面的相反，如果匹配到了，则不包含</li><li><code>[time]</code> 范围向量选择器，总和 <code>rate()</code> 等函数一同出现</li><li><code>offset</code> 偏移量，每个选择器加上 offset 可以回退到过去的某个时间</li></ul><p>可以在一个选择器中同时使用多个匹配器，且可以使用多个标签同样的匹配器</p>',9)]))}const m=o(s,[["render",d]]);export{l as __pageData,m as default};
